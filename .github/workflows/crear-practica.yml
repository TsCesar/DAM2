name: Crear práctica desde Issue

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Número del issue a procesar"
        required: true
        type: string

permissions:
  contents: write
  issues: write

jobs:
  crear:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && (
        (github.event.action == 'opened' &&
         contains(github.event.issue.body, '### Autor/a') &&
         contains(github.event.issue.body, '### Módulo') &&
         contains(github.event.issue.body, '### Nombre de la práctica (slug)') &&
         contains(github.event.issue.body, '### Archivo principal (con extensión)')) ||
        (github.event.action == 'labeled' && github.event.label.name == 'nueva-practica')
      ))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Lee el issue (auto o manual) y exporta variables seguras
        id: datos
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            let issue, num;

            if (context.eventName === 'workflow_dispatch') {
              num = parseInt(core.getInput('issue_number', {required:true}));
              issue = (await github.rest.issues.get({owner, repo, issue_number: num})).data;
            } else {
              issue = context.payload.issue;
              num = issue.number;
            }

            const body = issue.body || '';
            function escRe(s){ return s.replace(/[.*+?^${}()|[\]\\]/g,'\\$&'); }
            function campo(h){
              const re = new RegExp(`(?:^|\\n)\\s*###\\s*${escRe(h)}\\s*\\n([\\s\\S]*?)(?=\\n###\\s|$)`,'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }

            const autor    = campo('Autor/a');
            const modulo   = (campo('Módulo') || '').toLowerCase();
            let practica   = campo('Nombre de la práctica (slug)') || campo('Nombre de la práctica');
            let archivo    = campo('Archivo principal (con extensión)') || 'main.txt';
            const contenido= campo('Contenido inicial del archivo principal');

            function slugify(s){ return (s||'').toLowerCase().replace(/[^a-z0-9-]+/g,'-').replace(/^-+|-+$/g,''); }
            practica = slugify(practica);
            archivo  = (archivo||'main.txt').replace(/^[\\/]+/,'').replace(/\s+/g,'-');
            if(!/\./.test(archivo)) archivo += '.txt';

            const valid = [
              '01-acceso-datos',
              '02-computacion-descentralizada-blockchain',
              '03-desarrollo-interfaces',
              '04-programacion-servicios-procesos',
              '05-programacion-multimedia-moviles',
              '06-sistemas-gestion-empresarial'
            ];
            if (!valid.includes(modulo)) {
              core.setFailed(`Módulo no válido: ${modulo}`);
              return;
            }

            const fs = require('fs');
            fs.writeFileSync('contenido_tmp.txt', contenido || '', {encoding:'utf8'});

            // Variables de entorno para los siguientes pasos (con fallback)
            core.exportVariable('ISSUE_NUMBER', String(num));
            core.exportVariable('AUTOR', autor || 'Anónimo');
            core.exportVariable('MOD', modulo);
            core.exportVariable('PRAC', practica);
            core.exportVariable('FILE', archivo);
            core.exportVariable('CONTENT_FILE', 'contenido_tmp.txt');

      - name: Crea estructura y archivos de la práctica (sin heredoc)
        shell: bash
        run: |
          set -e
          mkdir -p "$MOD/practicas/$PRAC"

          {
            printf '# %s\n\n' "${PRAC}"
            printf '**Autor/a:** %s\n\n' "${AUTOR:-Anónimo}"
            printf '## Objetivo\n'
            printf 'Describe el objetivo de la práctica.\n\n'
            printf '## Requisitos\n'
            printf '- …\n\n'
            printf '## Pasos\n'
            printf '1. …\n2. …\n\n'
            printf '## Cómo ejecutar\n'
            printf '```bash\n'
            printf '# comandos\n'
            printf '```\n'
          } > "$MOD/practicas/$PRAC/README.md"

          if [ -s "$CONTENT_FILE" ]; then
            cp "$CONTENT_FILE" "$MOD/practicas/$PRAC/$FILE"
          else
            echo "// Pega aquí tu código para $FILE" > "$MOD/practicas/$PRAC/$FILE"
          fi

      - name: Actualiza índice, listas por módulo y tabla del README
        shell: bash
        run: |
          chmod +x scripts/*.sh || true
          scripts/actualiza_indice.sh || true
          scripts/actualiza_listas_modulos.sh || true
          scripts/actualiza_tabla_practicas.sh || true

      - name: Commit y push
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md docs/INDICE.md 0*/README.md "$MOD/practicas/$PRAC" || true
          git commit -m "feat(${MOD}): añade práctica ${PRAC} + docs auto [skip ci]" || echo "Nada que commitear"
          git push

      - name: Comenta con enlace y cierra el issue (si no es manual)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const num  = parseInt(process.env.ISSUE_NUMBER);
            const mod  = process.env.MOD;
            const prac = process.env.PRAC;
            const url  = `${context.payload.repository.html_url}/${mod}/practicas/${prac}/README.md`.replace(/\/\/+/g,'/');
            const msg  = `✅ Práctica creada: [${prac}](${url})\n\nSe han actualizado el **README**, las listas por módulo y \`docs/INDICE.md\`.`;
            await github.rest.issues.createComment({ owner, repo, issue_number: num, body: msg });
            await github.rest.issues.update({ owner, repo, issue_number: num, state: 'closed' });
