name: Crear práctica desde Issue

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Número del issue a procesar (solo si lo ejecutas manualmente)"
        required: false
        type: string

permissions:
  contents: write
  issues: write

jobs:
  crear:
    # Permite ejecución manual o por issue etiquetado/abierto con el formulario
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && (
        (github.event.action == 'opened' && contains(github.event.issue.body, '### Autor/a')) ||
        (github.event.action == 'labeled' && github.event.label.name == 'nueva-practica')
      ))
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Lee el issue (auto o manual) y exporta variables seguras
        id: datos
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            let issue, num;

            async function pickIssue() {
              const input = core.getInput('issue_number');
              if (input) {
                const n = parseInt(input, 10);
                if (!Number.isFinite(n)) core.setFailed(`issue_number inválido: ${input}`);
                const resp = await github.rest.issues.get({ owner, repo, issue_number: n });
                return resp.data;
              }
              const list = await github.paginate(github.rest.issues.listForRepo, {
                owner, repo, state: 'open', labels: 'nueva-practica', per_page: 1
              });
              if (!list.length) {
                core.setFailed('No se proporcionó issue_number y no hay issues abiertos con la etiqueta "nueva-practica".');
                return null;
              }
              return list[0];
            }

            if (context.eventName === 'workflow_dispatch') {
              issue = await pickIssue();
              if (!issue) return; // ya se marcó fallo arriba
              num = issue.number;
            } else {
              issue = context.payload.issue;
              num = issue.number;
            }

            const body = issue.body || '';
            function escRe(s){ return s.replace(/[.*+?^${}()|[\]\\]/g,'\\$&'); }
            function campo(h){
              const re = new RegExp(`(?:^|\\n)\\s*###\\s*${escRe(h)}\\s*\\n([\\s\\S]*?)(?=\\n###\\s|$)`,'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }

            const autor    = campo('Autor/a');
            const modulo   = (campo('Módulo') || '').toLowerCase();
            let practica   = campo('Nombre de la práctica (slug)') || campo('Nombre de la práctica');
            let archivo    = campo('Archivo principal (con extensión)') || 'main.txt';
            const contenido= campo('Contenido inicial del archivo principal');

            function slugify(s){ return (s||'').toLowerCase().replace(/[^a-z0-9-]+/g,'-').replace(/^-+|-+$/g,''); }
            practica = slugify(practica || '');
            archivo  = (archivo||'main.txt').replace(/^[\\/]+/,'').replace(/\s+/g,'-');
            if(!/\./.test(archivo)) archivo += '.txt';

            const valid = [
              '01-acceso-datos',
              '02-computacion-descentralizada-blockchain',
              '03-desarrollo-interfaces',
              '04-programacion-servicios-procesos',
              '05-programacion-multimedia-moviles',
              '06-sistemas-gestion-empresarial'
            ];
            if (!valid.includes(modulo)) {
              core.setFailed(`Módulo no válido: ${modulo}`);
              return;
            }

            const fs = require('fs');
            fs.writeFileSync('contenido_tmp.txt', contenido || '', { encoding: 'utf8' });

            core.exportVariable('ISSUE_NUMBER', String(num));
            core.exportVariable('AUTOR', autor || '');
            core.exportVariable('MOD', modulo);
            core.exportVariable('PRAC', practica);
            core.exportVariable('FILE', archivo);
            core.exportVariable('CONTENT_FILE', 'contenido_tmp.txt');

      - name: Crea estructura y archivos (README mínimo: autor + código)
        shell: bash
        run: |
          set -euo pipefail
          root="$MOD/practicas/$PRAC"
          mkdir -p "$root"

          # Archivo principal
          if [ -s "$CONTENT_FILE" ]; then
            cp "$CONTENT_FILE" "$root/$FILE"
          else
            printf "// Pega aquí tu código para %s\n" "$FILE" > "$root/$FILE"
          fi

          # Detecta lenguaje para el bloque del README
          ext="${FILE##*.}"
          case "$ext" in
            java) lang=java ;;
            kt)   lang=kotlin ;;
            py)   lang=python ;;
            js)   lang=javascript ;;
            ts)   lang=typescript ;;
            html) lang=html ;;
            css)  lang=css ;;
            xml)  lang=xml ;;
            sql)  lang=sql ;;
            md)   lang=markdown ;;
            *)    lang="" ;;
          esac

          # README mínimo (solo autor + bloque con el código)
          {
            printf "**Autor/a:** %s\n\n" "${AUTOR:-Desconocido}"
            echo '```'"$lang"
            cat "$root/$FILE"
            echo '```'
          } > "$root/README.md"

      - name: Actualiza índice, listas por módulo y tabla del README
        shell: bash
        run: |
          chmod +x scripts/*.sh || true
          ./scripts/actualiza_indice.sh || true
          ./scripts/actualiza_listas_modulos.sh || true
          ./scripts/actualiza_tabla_practicas.sh || true

      - name: Commit y push
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md docs/INDICE.md 0*/README.md "$MOD/practicas/$PRAC" || true
          git commit -m "feat(${MOD}): añade práctica ${PRAC} + docs auto [skip ci]" || echo "Nada que commitear"
          git push

      - name: Comenta con enlace y cierra el issue (si no es manual)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = parseInt(process.env.ISSUE_NUMBER, 10);
            const branch = (context.ref || 'refs/heads/main').replace('refs/heads/','');
            const mod = process.env.MOD;
            const prac = process.env.PRAC;
            const url = `${context.payload.repository.html_url}/blob/${branch}/${mod}/practicas/${prac}/README.md`;
            const msg = `✅ Práctica creada: [${prac}](${url})\n\nSe han actualizado el README, las listas de cada módulo y docs/INDICE.md.`;
            await github.rest.issues.createComment({ owner, repo, issue_number: num, body: msg });
            await github.rest.issues.update({ owner, repo, issue_number: num, state: 'closed' });
